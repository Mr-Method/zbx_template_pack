<?xml version="1.0" encoding="UTF-8"?>
<tns:root xmlns:tns="http://www.example.org/zbx_template_new/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.example.org/zbx_template_new/ ../../src/main/resources/templates/metrics.xsd">
  <template>
	  <classes>
	  	<class>EtherLike-MIB</class>
	  	
	  	<class>SNMPv1</class>
	  	<class>SNMPv2</class>
	  </classes>
	  <name>Template SNMP EtherLike-MIB</name>
	  <description>Template SNMP EtherLike-MIB (duplex control only)</description>
	  <sysObjectID>na</sysObjectID>
	  <discoveryRules>
	  	  	<discoveryRule>
				<name>EtherLike-MIB Discovery</name>
		        <snmp_oid>discovery[{#SNMPVALUE},1.3.6.1.2.1.10.7.2.1.19,{#IFOPERSTATUS},ifOperStatus,{#IFALIAS},1.3.6.1.2.1.31.1.1.1.18,{#IFNAME},1.3.6.1.2.1.31.1.1.1.1,{#IFDESCR},.1.3.6.1.2.1.2.2.1.2]</snmp_oid>
		        <key>net.if.duplex.discovery</key>
		        <description>Discovering interfaces from IF-MIB and EtherLike-MIB. Interfaces with up(1) Operational Status are discovered.</description>
				<filter>
                        <evaltype>1</evaltype>
                        <formula/>
                        <conditions>
                            <condition>
                                <macro>{#IFOPERSTATUS}</macro>
                                <value>1</value>
                                <operator>8</operator>
                                <formulaid>B</formulaid>
                            </condition>
                           <condition>
                                <macro>{#SNMPVALUE}</macro>
                                <value>(2|3)</value>
                                <operator>8</operator>
                                <formulaid>B</formulaid>
                            </condition>                            
                        </conditions>
                </filter>
	  		</discoveryRule>
	  </discoveryRules>
	  <metrics>
    	<net.if.duplex>
    		<oid>.1.3.6.1.2.1.10.7.2.1.19.{#SNMPINDEX}</oid>
    		<snmpObject>dot3StatsDuplexStatus.{#SNMPINDEX}</snmpObject>
    		<mib>EtherLike-MIB</mib>
    		<alarmObject>Interface {#IFNAME}({#IFALIAS})</alarmObject>
    		<valueMap>EtherLike-MIB::dot3StatsDuplexStatus</valueMap>
    		<discoveryRule>EtherLike-MIB Discovery</discoveryRule>
			<ref>[IEEE 802.3 Std.], 30.3.1.1.32,aDuplexStatus.</ref>
			<vendorDescription>The current mode of operation of the MAC
entity.  'unknown' indicates that the current
duplex mode could not be determined.

Management control of the duplex mode is
accomplished through the MAU MIB.  When
an interface does not support autonegotiation,
or when autonegotiation is not enabled, the
duplex mode is controlled using
ifMauDefaultType.  When autonegotiation is
supported and enabled, duplex mode is controlled
using ifMauAutoNegAdvertisedBits.  In either
case, the currently operating duplex mode is
reflected both in this object and in ifMauType.

Note that this object provides redundant
information with ifMauType.  Normally, redundant
objects are discouraged.  However, in this
instance, it allows a management application to
determine the duplex status of an interface
without having to know every possible value of
ifMauType.  This was felt to be sufficiently
valuable to justify the redundancy.</vendorDescription>
    	</net.if.duplex>
	   </metrics>
  </template>
	<value_maps>
		<value_map>
			<name>EtherLike-MIB::dot3StatsDuplexStatus</name>
			<mappings>
				<mapping>
					<value>1</value>
					<newvalue>unknown</newvalue>
				</mapping>
				<mapping>
					<value>2</value>
					<newvalue>halfDuplex</newvalue>
				</mapping>
				<mapping>
					<value>3</value>
					<newvalue>fullDuplex</newvalue>
				</mapping>
			</mappings>
		</value_map>
	</value_maps>
  </tns:root>
